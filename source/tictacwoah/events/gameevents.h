#ifndef GAMEEVENTS_H
#define GAMEEVENTS_H

#include <app\event\ievent.h>
#include "../logic/linescanner.h"
#include <vector>

// These events are generated by the game to let the players know what's going on

// Requested to fill a grid space with the given player
class MatchCompleteEvent : public BaseEvent
{
public:
	MatchCompleteEvent(int winner) : Winner(winner) {}
	virtual const EventType& GetType() { return Type; }
	virtual const char* GetName() const { return "MatchCompleteEvent"; }

	static EventType Type;
	int Winner;
};

enum ModificationFlag
{
	OBJECT_CREATED = 0,
	OBJECT_MODIFIED,
	OBJECT_DELETED
};

// Sent when a line has changed
class LineEvent : public BaseEvent
{
public:
	LineEvent(const Line& line, ModificationFlag flag, int gridId = 0) : LineData(line), Flag(flag), GridId(gridId) {}
	virtual const EventType& GetType() { return Type; }
	virtual const char* GetName() const { return "LineEvent"; }

	static EventType Type;
	Line LineData;
	ModificationFlag Flag;
	int GridId;
};

// Sent when a line merges existing lines
class LineMergeEvent : public BaseEvent
{
public:
	LineMergeEvent(const Line& line, std::vector<int> existingLineIds) : LineData(line), ExistingLineIds(existingLineIds) {}
	virtual const EventType& GetType() { return Type; }
	virtual const char* GetName() const { return "LineMergeEvent"; }

	static EventType Type;
	Line LineData;
	std::vector<int> ExistingLineIds;
};

// Sent when a line merges existing lines
class ScoreChangeEvent : public BaseEvent
{
public:
	ScoreChangeEvent(int player, int score) : Player(player), Score(score) {}
	virtual const EventType& GetType() { return Type; }
	virtual const char* GetName() const { return "ScoreChangeEvent"; }

	static EventType Type;
	int Player;
	int Score;
};

class CreateGameEvent : public BaseEvent
{
public:
	CreateGameEvent() {}
	virtual const EventType& GetType() { return Type; }
	virtual const char* GetName() const { return "CreateGameEvent"; }

	static EventType Type;
};

#endif